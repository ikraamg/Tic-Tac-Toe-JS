!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=4)}([function(e,t,r){var n=r(1),o=r(2);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};n(o,a);e.exports=o.locals||{}},function(e,t,r){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),i=[];function c(e){for(var t=-1,r=0;r<i.length;r++)if(i[r].identifier===e){t=r;break}return t}function s(e,t){for(var r={},n=[],o=0;o<e.length;o++){var a=e[o],s=t.base?a[0]+t.base:a[0],l=r[s]||0,u="".concat(s," ").concat(l);r[s]=l+1;var d=c(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:u,updater:v(p,t),references:1}),n.push(u)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,r){var n=r.css,o=r.media,a=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var m=null,y=0;function v(e,t){var r,n,o;if(t.singleton){var a=y++;r=m||(m=l(t)),n=p.bind(null,r,a,!1),o=p.bind(null,r,a,!0)}else r=l(t),n=f.bind(null,r,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var r=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var o=c(r[n]);i[o].references--}for(var a=s(e,t),l=0;l<r.length;l++){var u=c(r[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}r=a}}}},function(e,t,r){(t=r(3)(!1)).push([e.i,".text-center{text-align:center}.names{display:flex;justify-content:space-around}.player1,.player2{background-color:#add8e6}.hide{display:none}.d-center{display:flex;justify-content:center;align-items:center}.form{display:flex;justify-content:center;margin:10px 0}.board{display:grid;justify-content:center;grid-template-columns:repeat(3, 150px);grid-template-rows:repeat(3, 150px)}.block{border:thin solid #000;font-size:100px;display:flex;justify-content:center;align-items:center}.hvr-glow{vertical-align:middle;-webkit-transform:perspective(1px) translateZ(0);transform:perspective(1px) translateZ(0);box-shadow:0 0 2px rgba(0,0,0,0);-webkit-transition-duration:.3s;transition-duration:.3s;-webkit-transition-property:box-shadow;transition-property:box-shadow}.hvr-glow:hover,.hvr-glow:focus,.hvr-glow:active{box-shadow:0 0 8px rgba(0,0,0,.6);background-color:rgba(163,154,154,.3)}#snackbar{visibility:hidden;min-width:250px;margin-left:-125px;background-color:#333;color:#fff;text-align:center;border-radius:2px;padding:16px;position:fixed;z-index:1;right:10%;top:30px;font-size:17px}#snackbar.show{visibility:visible;-webkit-animation:fadein .5s,fadeout .5s 2.5s;animation:fadein .5s,fadeout .5s 2.5s}@-webkit-keyframes fadein{from{top:0;opacity:0}to{top:30px;opacity:1}}@keyframes fadein{from{top:0;opacity:0}to{top:30px;opacity:1}}@-webkit-keyframes fadeout{from{top:30px;opacity:1}to{top:0;opacity:0}}@keyframes fadeout{from{top:30px;opacity:1}to{top:0;opacity:0}}",""]),e.exports=t},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(i=n,c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([o]).join("\n")}var i,c,s;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);n&&o[s[0]]||(r&&(s[2]?s[2]="".concat(r," and ").concat(s[2]):s[2]=r),t.push(s))}},t}},function(e,t,r){"use strict";r.r(t);const n=(e,t)=>({name:e,symbol:t,arr:[],hasWon:function(e){let t=!1;return e.forEach(e=>{this.arr.includes(e[0])&&this.arr.includes(e[1])&&this.arr.includes(e[2])&&(t=!0)}),t}}),o={testBoard:["","","","","","","","",""],gamesPlayed:0,wA:[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]],resetBoard:function(){this.testBoard=["","","","","","","","",""]}},a={renderBoard:(e,t)=>{o.testBoard.forEach((r,n)=>{const o=document.querySelector(".block"+(n+1));o.addEventListener("click",()=>t.playerMove(n,a,e)),o.textContent=r})},btnListners:(e,t)=>{const r=document.querySelector("#play"),n=document.querySelector("#reset"),o=document.querySelector("#play-again");r.addEventListener("click",e),n.addEventListener("click",t),o.addEventListener("click",e)},replaceText:(e,t)=>{document.querySelector(e).textContent=t},addClass:(e,t)=>{document.querySelector(e).classList.add(t)},removeClass:(e,t)=>{document.querySelector(e).classList.remove(t)},toggleClass:(e,t)=>{document.querySelector(e).classList.toggle(t)},snackBar:e=>{const t=document.getElementById("snackbar");t.textContent=e,t.className="show",setTimeout(()=>{t.className=t.className.replace("show","")},3e3)},removeClick:()=>{o.testBoard.forEach((e,t)=>{const r=document.querySelector(".block"+(t+1)),n=r.cloneNode(!0);r.parentNode.replaceChild(n,r)})}};r(0);const i=(()=>{const e=n("","O"),t=n("","X");return{moveCount:0,isDraw:function(){return this.moveCount>8},getCurrentPlayer:function(e,t){return this.moveCount+=1,this.moveCount%2==0?e:t},playerMove:function(r,n){if(""===o.testBoard[r]){const a=this.getCurrentPlayer(e,t);n.replaceText(".block"+(r+1),a.symbol),o.testBoard[r]=a.symbol,a.arr.push(r),a.hasWon(o.wA)&&(n.snackBar(a.name+" has won!"),this.moveCount=0,n.removeClass("#play-again","hide"),n.removeClick()),this.isDraw()&&(n.snackBar("Draw"),this.moveCount=0,n.removeClass("#play-again","hide"),n.removeClick())}else n.snackBar("Please select empty block")},player1:e,player2:t,resetPlayerArrays:function(){e.arr=[],t.arr=[]}}})(),c=()=>{const e=document.querySelector("#player1").value,t=document.querySelector("#player2").value;e.length<1||t.length<1?a.snackBar("Please enter your names"):(i.player1.name=e,i.player2.name=t,o.resetBoard(),a.addClass("#play-again","hide"),a.snackBar("Game is started"),a.replaceText(".player1",i.player1.name),a.replaceText(".player2",i.player2.name),i.resetPlayerArrays(),i.moveCount=0,a.renderBoard(c,i),o.gamesPlayed+=1)};a.btnListners(c,()=>{a.replaceText(".player1",""),a.replaceText(".player2",""),o.resetBoard(),o.testBoard.forEach((e,t)=>{document.querySelector(".block"+(t+1)).textContent=e}),a.addClass("#play-again","hide"),a.removeClick()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,